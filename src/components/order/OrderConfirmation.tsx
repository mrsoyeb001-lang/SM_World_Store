import { useEffect, useState } from 'react';
import { useLocation, Link } from 'react-router-dom';
import { useAuth } from '@/hooks/useAuth';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { CheckCircle, Package, Truck, Home, Clock, MapPin, Phone, Mail, CreditCard, FileText } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';

interface OrderItem {
  product_id: string;
  quantity: number;
  price: number;
  product: {
    name: string;
    image_url?: string;
  };
}

interface ShippingAddress {
  full_name: string;
  phone: string;
  address: string;
  city: string;
  sender_number?: string;
  transaction_id?: string;
}

interface OrderDetails {
  id: string;
  created_at: string;
  total_amount: number;
  shipping_cost: number;
  discount_amount: number;
  payment_method: string;
  status: string;
  notes?: string;
  promo_code?: string;
  order_items: OrderItem[];
  shipping_address: ShippingAddress;
}

export function OrderConfirmation() {
  const { user } = useAuth();
  const location = useLocation();
  const [orderDetails, setOrderDetails] = useState<OrderDetails | null>(null);
  const [loading, setLoading] = useState(true);

  // Get order data from navigation state or fetch from API
  useEffect(() => {
    if (location.state) {
      // If we have state from navigation, use it
      const { orderId, total, shippingAddress } = location.state;
      
      // In a real app, you would fetch the complete order details using the orderId
      // For now, we'll create a mock order object
      const mockOrder: OrderDetails = {
        id: orderId,
        created_at: new Date().toISOString(),
        total_amount: total,
        shipping_cost: 60,
        discount_amount: 0,
        payment_method: 'cash_on_delivery',
        status: 'pending',
        order_items: [
          {
            product_id: 'prod_001',
            quantity: 1,
            price: total - 60,
            product: {
              name: '‡¶∏amsung Galaxy S21 Ultra',
              image_url: 'https://images.unsplash.com/photo-1546868871-7041f2a55e12?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&q=60'
            }
          }
        ],
        shipping_address: shippingAddress
      };
      
      setOrderDetails(mockOrder);
      setLoading(false);
    } else {
      // If no state, try to get the latest order for the user
      // This would be an API call in a real application
      setTimeout(() => {
        const mockOrder: OrderDetails = {
          id: 'ord_789012',
          created_at: new Date().toISOString(),
          total_amount: 4599,
          shipping_cost: 60,
          discount_amount: 0,
          payment_method: 'bkash',
          status: 'pending',
          order_items: [
            {
              product_id: 'prod_001',
              quantity: 1,
              price: 3999,
              product: {
                name: '‡¶∏amsung Galaxy S21 Ultra',
                image_url: 'https://images.unsplash.com/photo-1546868871-7041f2a55e12?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&q=60'
              }
            },
            {
              product_id: 'prod_002',
              quantity: 1,
              price: 600,
              product: {
                name: 'Sony WH-1000XM4 ‡¶π‡ßá‡¶°‡¶´‡ßã‡¶®',
                image_url: 'https://images.unsplash.com/photo-1585298723682-7115561c51b7?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&q=60'
              }
            }
          ],
          shipping_address: {
            full_name: '‡¶Ü‡¶π‡¶Æ‡ßá‡¶¶ ‡¶∞‡¶π‡¶Æ‡¶æ‡¶®',
            phone: '+8801712XXXXXX',
            address: '‡ßß‡ß®/‡ß™, ‡¶Æ‡¶ø‡¶∞‡¶™‡ßÅ‡¶∞ ‡¶∞‡ßã‡¶°, ‡¶¢‡¶æ‡¶ï‡¶æ-‡ßß‡ß®‡ßß‡ß¨',
            city: '‡¶¢‡¶æ‡¶ï‡¶æ',
            sender_number: '+8801712XXXXXX',
            transaction_id: 'TRX78901234'
          }
        };
        
        setOrderDetails(mockOrder);
        setLoading(false);
      }, 1000);
    }
  }, [location.state]);

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8 max-w-4xl">
        <Card className="bg-blue-50 border-blue-200">
          <CardHeader className="text-center pb-4">
            <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4 animate-pulse">
              <Package className="w-8 h-8 text-blue-600" />
            </div>
            <CardTitle className="text-2xl text-blue-800">‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</CardTitle>
            <p className="text-blue-600">‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§</p>
          </CardHeader>
        </Card>
      </div>
    );
  }

  if (!orderDetails) {
    return (
      <div className="container mx-auto px-4 py-8 max-w-4xl">
        <Card className="bg-yellow-50 border-yellow-200">
          <CardHeader className="text-center pb-4">
            <div className="w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <Clock className="w-8 h-8 text-yellow-600" />
            </div>
            <CardTitle className="text-2xl text-yellow-800">‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø</CardTitle>
            <p className="text-yellow-600">‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶á‡¶®‡¶ø‡•§</p>
            <Button asChild className="mt-4">
              <Link to="/user-dashboard">‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®</Link>
            </Button>
          </CardHeader>
        </Card>
      </div>
    );
  }

  const getPaymentMethodText = (method: string) => {
    switch (method) {
      case 'cash_on_delivery':
        return '‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶Ö‡¶® ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø';
      case 'bkash':
        return '‡¶¨‡¶ø‡¶ï‡¶æ‡¶∂';
      case 'rocket':
        return '‡¶∞‡¶ï‡ßá‡¶ü';
      case 'nagad':
        return '‡¶®‡¶ó‡¶¶';
      default:
        return method;
    }
  };

  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl">
      <Card className="bg-green-50 border-green-200 shadow-lg">
        <CardHeader className="text-center pb-4">
          <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <CheckCircle className="w-8 h-8 text-green-600" />
          </div>
          <CardTitle className="text-2xl text-green-800">‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡¶´‡¶≤! üéâ</CardTitle>
          <p className="text-green-600">‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§</p>
          <Badge variant="outline" className="mt-2 bg-white text-green-800 border-green-300">
            ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞: #{orderDetails.id.slice(0, 8).toUpperCase()}
          </Badge>
        </CardHeader>
        
        <CardContent className="space-y-6">
          {/* Order Summary */}
          <div className="bg-white p-4 rounded-lg border shadow-sm">
            <h3 className="font-semibold text-lg mb-4 flex items-center">
              <FileText className="w-5 h-5 mr-2 text-blue-500" />
              ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶∞‡¶æ‡¶Ç‡¶∂
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div>
                <p className="text-sm text-gray-500">‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ</p>
                <p className="font-medium">{new Date(orderDetails.created_at).toLocaleDateString('bn-BD')}</p>
              </div>
              <div>
                <p className="text-sm text-gray-500">‡¶Æ‡ßã‡¶ü ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£</p>
                <p className="font-medium text-green-600">‡ß≥{orderDetails.total_amount.toLocaleString('bn-BD')}</p>
              </div>
              <div>
                <p className="text-sm text-gray-500">‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø</p>
                <p className="font-medium">{getPaymentMethodText(orderDetails.payment_method)}</p>
              </div>
              <div>
                <p className="text-sm text-gray-500">‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏</p>
                <Badge 
                  className={
                    orderDetails.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                    orderDetails.status === 'confirmed' ? 'bg-blue-100 text-blue-800' :
                    orderDetails.status === 'shipped' ? 'bg-purple-100 text-purple-800' :
                    'bg-green-100 text-green-800'
                  }
                >
                  {orderDetails.status === 'pending' && '‡¶¨‡¶ø‡¶ö‡¶æ‡¶∞‡¶æ‡¶ß‡ßÄ‡¶®'}
                  {orderDetails.status === 'confirmed' && '‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§‡¶ï‡ßÉ‡¶§'}
                  {orderDetails.status === 'shipped' && '‡¶∂‡¶ø‡¶™ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá'}
                  {orderDetails.status === 'delivered' && '‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®'}
                </Badge>
              </div>
            </div>

            {orderDetails.payment_method !== 'cash_on_delivery' && orderDetails.shipping_address.transaction_id && (
              <div className="bg-blue-50 p-3 rounded border border-blue-100 mt-3">
                <p className="text-sm text-blue-800">
                  <span className="font-medium">‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø:</span> {orderDetails.shipping_address.transaction_id}
                </p>
                {orderDetails.shipping_address.sender_number && (
                  <p className="text-sm text-blue-800 mt-1">
                    <span className="font-medium">‡¶∏‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞:</span> {orderDetails.shipping_address.sender_number}
                  </p>
                )}
              </div>
            )}
          </div>

          {/* Order Items */}
          <div className="bg-white p-4 rounded-lg border shadow-sm">
            <h3 className="font-semibold text-lg mb-4 flex items-center">
              <Package className="w-5 h-5 mr-2 text-purple-500" />
              ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡¶ï‡ßÉ‡¶§ ‡¶™‡¶£‡ßç‡¶Ø
            </h3>
            
            <div className="space-y-4">
              {orderDetails.order_items.map((item, index) => (
                <div key={index} className="flex items-center border-b pb-4 last:border-b-0 last:pb-0">
                  <div className="w-16 h-16 overflow-hidden rounded-lg mr-4 bg-gray-100 flex items-center justify-center">
                    {item.product.image_url ? (
                      <img 
                        src={item.product.image_url} 
                        alt={item.product.name}
                        className="w-full h-full object-cover"
                      />
                    ) : (
                      <Package className="w-8 h-8 text-gray-400" />
                    )}
                  </div>
                  <div className="flex-1">
                    <h4 className="font-medium">{item.product.name}</h4>
                    <div className="flex justify-between items-center mt-1">
                      <div className="text-sm text-gray-600">‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£: {item.quantity}</div>
                      <div className="font-medium">‡ß≥{(item.price * item.quantity).toLocaleString('bn-BD')}</div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
            
            <Separator className="my-4" />
            
            <div className="space-y-2">
              <div className="flex justify-between">
                <span className="text-gray-600">‡¶â‡¶™-‡¶Æ‡ßã‡¶ü:</span>
                <span className="font-medium">‡ß≥{(orderDetails.total_amount - orderDetails.shipping_cost + orderDetails.discount_amount).toLocaleString('bn-BD')}</span>
              </div>
              {orderDetails.discount_amount > 0 && (
                <div className="flex justify-between text-green-600">
                  <span>‡¶õ‡¶æ‡¶°‡¶º {orderDetails.promo_code && `(${orderDetails.promo_code})`}:</span>
                  <span>-‡ß≥{orderDetails.discount_amount.toLocaleString('bn-BD')}</span>
                </div>
              )}
              <div className="flex justify-between">
                <span className="text-gray-600">‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú:</span>
                <span className="font-medium">‡ß≥{orderDetails.shipping_cost.toLocaleString('bn-BD')}</span>
              </div>
              <div className="flex justify-between text-lg font-bold mt-2 pt-2 border-t">
                <span>‡¶Æ‡ßã‡¶ü:</span>
                <span className="text-green-600">‡ß≥{orderDetails.total_amount.toLocaleString('bn-BD')}</span>
              </div>
            </div>
          </div>

          {/* Shipping Information */}
          <div className="bg-white p-4 rounded-lg border shadow-sm">
            <h3 className="font-semibold text-lg mb-4 flex items-center">
              <MapPin className="w-5 h-5 mr-2 text-red-500" />
              ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶§‡¶•‡ßç‡¶Ø
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <p className="text-sm text-gray-500">‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ</p>
                <p className="font-medium">{orderDetails.shipping_address.full_name}</p>
              </div>
              <div>
                <p className="text-sm text-gray-500">‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞</p>
                <p className="font-medium flex items-center">
                  <Phone className="w-4 h-4 mr-1" />
                  {orderDetails.shipping_address.phone}
                </p>
              </div>
              <div className="md:col-span-2">
                <p className="text-sm text-gray-500">‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ</p>
                <p className="font-medium">{orderDetails.shipping_address.address}, {orderDetails.shipping_address.city}</p>
              </div>
            </div>
          </div>

          {/* Next Steps */}
          <div className="bg-blue-50 p-4 rounded-lg border border-blue-100">
            <div className="flex items-start gap-3">
              <Truck className="w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0" />
              <div>
                <h4 className="font-medium text-blue-900">‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶ß‡¶æ‡¶™</h4>
                <p className="text-sm text-blue-700">
                  ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§ ‡¶ï‡¶∞‡¶õ‡¶ø‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶¨‡¶æ SMS ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶™‡¶æ‡¶¨‡ßá‡¶®‡•§
                  ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡ß®-‡ß© ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶¶‡¶ø‡¶¨‡¶∏‡ßá ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá ‡¶•‡¶æ‡¶ï‡ßá‡•§ ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶π‡ßá‡¶≤‡ßç‡¶™‡¶≤‡¶æ‡¶á‡¶®‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
                </p>
              </div>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-3">
            <Button asChild className="flex-1" variant="outline">
              <Link to="/">
                <Home className="w-4 h-4 mr-2" />
                ‡¶π‡ßã‡¶Æ‡¶™‡ßá‡¶ú
              </Link>
            </Button>
            <Button asChild className="flex-1" variant="outline">
              <Link to="/user-dashboard/orders">
                <FileText className="w-4 h-4 mr-2" />
                ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
              </Link>
            </Button>
            <Button asChild className="flex-1 btn-gradient">
              <Link to="/products">
                ‡¶Ü‡¶∞‡ßã ‡¶ï‡ßá‡¶®‡¶æ‡¶ï‡¶æ‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
              </Link>
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
